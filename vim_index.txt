|c_CTRL-R_CTRL-R| CTRL-R CTRL-R {regname}
|i_CTRL-X_s|		CTRL-X s	spelling suggestions
|i_CTRL-X_CTRL-D|	CTRL-X CTRL-D	complete defined identifiers
|i_CTRL-X_CTRL-E|	CTRL-X CTRL-E	scroll up
|i_CTRL-X_CTRL-F|	CTRL-X CTRL-F	complete file names
|i_CTRL-X_CTRL-I|	CTRL-X CTRL-I	complete identifiers
|i_CTRL-X_CTRL-K|	CTRL-X CTRL-K	complete identifiers from dictionary
|i_CTRL-X_CTRL-L|	CTRL-X CTRL-L	complete whole lines
|i_CTRL-X_CTRL-N|	CTRL-X CTRL-N	next completion
|i_CTRL-X_CTRL-O|	CTRL-X CTRL-O	omni completion
|i_CTRL-X_CTRL-P|	CTRL-X CTRL-P	previous completion
|i_CTRL-X_CTRL-S|	CTRL-X CTRL-S	spelling suggestions
|i_CTRL-X_CTRL-T|	CTRL-X CTRL-T	complete identifiers from thesaurus
|i_CTRL-X_CTRL-Y|	CTRL-X CTRL-Y	scroll down
|i_CTRL-X_CTRL-U|	CTRL-X CTRL-U	complete with 'completefunc'
|i_CTRL-X_CTRL-V|	CTRL-X CTRL-V	complete like in : command line
|i_CTRL-X_CTRL-Z|	CTRL-X CTRL-Z	stop completion, keeping the text as-is
|i_CTRL-X_CTRL-]|	CTRL-X CTRL-]	complete tags

|i_CTRL-X|	CTRL-X {mode}	enter CTRL-X sub mode, see |i_CTRL-X_index|
|CTRL-<Tab>|	CTRL-<Tab>	   same as `g<Tab>` : go to last accessed tab page
|i_digraph|	{char1}<BS>{char2} enter digraph (only when 'digraph' option set)
|i_CTRL-SHIFT-Q|  CTRL-SHIFT-Q {char} like CTRL-Q unless |tui-modifyOtherKeys| is active
|i_CTRL-@|	CTRL-@		insert previously inserted text and stop insert
|i_CTRL-A|	CTRL-A		insert previously inserted text
|i_CTRL-C|	CTRL-C		quit insert mode, without checking for abbreviation
|i_CTRL-D|	CTRL-D		delete one shiftwidth of indent in the current line
|i_CTRL-E|	CTRL-E		insert the character which is below the cursor re-indent the current line)
|i_CTRL-G_j|	CTRL-G CTRL-J	line down, to column where inserting started
|i_CTRL-G_j|	CTRL-G j	line down, to column where inserting started
|i_CTRL-G_j|	CTRL-G <Down>	line down, to column where inserting started
|i_CTRL-G_k|	CTRL-G CTRL-K	line up, to column where inserting started
|i_CTRL-G_k|	CTRL-G k	line up, to column where inserting started
|i_CTRL-G_k|	CTRL-G <Up>	line up, to column where inserting started
|i_CTRL-G_u|	CTRL-G u	start new undoable edit
|i_CTRL-G_U|	CTRL-G U	don't break undo with next cursor movement
|v_ab|		ab		   "a block" from "[(" to "])" (with braces)
|v_ap|		ap		   "a paragraph" (with white space)
|v_as|		as		   "a sentence" (with white space)
|v_at|		at		   "a tag block" (with white space)
|v_aw|		aw		   "a word" (with white space)
|v_a{|		a{		   same as aB
|v_a}|		a}		   same as aB
|v_iquote|	i"		   double quoted string without the quotes
|v_i'|		i'		   single quoted string without the quotes
|v_i(|		i(		   same as ib
|v_i)|		i)		   same as ib
|v_i<|		i<		   "inner <>" from '<' to the matching '>'
|v_i>|		i>		   same as i<
|v_iB|		iB		   "inner Block" from "[{" and "]}"
|v_iW|		iW		   "inner WORD"
|v_i[|		i[		   "inner []" from '[' to the matching ']'
|v_i]|		i]		   same as i[
|v_i`|		i`		   string in backticks without the backticks
|v_ib|		ib		   "inner block" from "[(" to "])"
|v_ip|		ip		   "inner paragraph"
|v_is|		is		   "inner sentence"
|v_it|		it		   "inner tag block"
|v_iw|		iw		   "inner word"
|v_i{|		i{		   same as iB
|v_i}|		i}		   same as iB
|v_aquote|	a"		   double quoted string
|v_a'|		a'		   single quoted string
|v_a(|		a(		   same as ab
|v_a)|		a)		   same as ab
|v_a<|		a<		   "a <>" from '<' to the matching '>'
|v_a>|		a>		   same as a<
|v_aB|		aB		   "a Block" from "[{" to "]}" (with brackets)
|v_aW|		aW		   "a WORD" (with white space)
|v_a[|		a[		   "a []" from '[' to the matching ']'
|v_a]|		a]		   same as a[
|v_a`|		a`		   string in backticks

|i_<BS>|	<BS>		delete character before the cursor
|i_CTRL-H|	CTRL-H		same as <BS>
|i_<Tab>|	<Tab>		insert a <Tab> character
|i_CTRL-I|	CTRL-I		same as <Tab>
|i_<NL>|	<NL>		same as <CR>
|i_CTRL-J|	CTRL-J		same as <CR>
|i_CTRL-K|	CTRL-K {char1} {char2} enter digraph
|i_<CR>|	<CR>		begin new line
|i_CTRL-M|	CTRL-M		same as <CR>
|i_CTRL-N|	CTRL-N		find next match for keyword in front of the cursor
|i_CTRL-O|	CTRL-O		execute a single command and return to insert mode
|i_CTRL-P|	CTRL-P		find previous match for keyword in front of the cursor
|i_CTRL-Q|	CTRL-Q		same as CTRL-V, unless used for terminal control flow
|i_CTRL-SHIFT-Q|  CTRL-SHIFT-Q {char} like CTRL-Q unless |tui-modifyOtherKeys| is active
|i_CTRL-R|	CTRL-R {register} insert the contents of a register
|i_CTRL-R_CTRL-R| CTRL-R CTRL-R {register} insert the contents of a register literally
|i_CTRL-R_CTRL-O| CTRL-R CTRL-O {register} insert the contents of a register literally and don't auto-indent
|i_CTRL-R_CTRL-P| CTRL-R CTRL-P {register} insert the contents of a register literally and fix indent.
|i_CTRL-T|	CTRL-T		insert one shiftwidth of indent in current line
|i_CTRL-U|	CTRL-U		delete all entered characters in the current line
|i_CTRL-V|	CTRL-V {char}	insert next non-digit literally
|i_CTRL-SHIFT-V|  CTRL-SHIFT-V {char} like CTRL-V unless |tui-modifyOtherKeys| is active
|i_CTRL-V_digit| CTRL-V {number} insert three digit decimal number as a single byte.
|i_CTRL-W|	CTRL-W		delete word before the cursor
|i_CTRL-Y|	CTRL-Y		insert the character which is above the cursor
|i_<Esc>|	<Esc>		end insert mode
|i_CTRL-[|	CTRL-[		same as <Esc>
|i_CTRL-\_CTRL-N| CTRL-\ CTRL-N	go to Normal mode
|i_CTRL-\_CTRL-G| CTRL-\ CTRL-G	go to Normal mode CTRL-\ a - z	reserved for extensions
|i_CTRL-]|	CTRL-]		trigger abbreviation
|i_CTRL-^|	CTRL-^		toggle use of |:lmap| mappings
|i_CTRL-_|	CTRL-_		When 'allowrevins' set: change language (Hebrew)

|i_0_CTRL-D|	0 CTRL-D	delete all indent in the current line
|i_^_CTRL-D|	^ CTRL-D	delete all indent in the current line, restore it in the next line

|i_<Del>|	<Del>		delete character under the cursor

|i_<Left>|	<Left>		cursor one character left
|i_<S-Left>|	<S-Left>	cursor one word left
|i_<C-Left>|	<C-Left>	cursor one word left
|i_<Right>|	<Right>		cursor one character right
|i_<S-Right>|	<S-Right>	cursor one word right
|i_<C-Right>|	<C-Right>	cursor one word right
|i_<Up>|	<Up>		cursor one line up
|i_<S-Up>|	<S-Up>		same as <PageUp>
|i_<Down>|	<Down>		cursor one line down
|i_<S-Down>|	<S-Down>	same as <PageDown>
|i_<Home>|	<Home>		cursor to start of line
|i_<C-Home>|	<C-Home>	cursor to start of file
|i_<End>|	<End>		cursor past end of line
|i_<C-End>|	<C-End>		cursor past end of file
|i_<PageUp>|	<PageUp>	one screenful backward
|i_<PageDown>|	<PageDown>	one screenful forward
|i_<F1>|	<F1>		same as <Help>
|i_<Help>|	<Help>		stop insert mode and display help window
|i_<Insert>|	<Insert>	toggle Insert/Replace mode
|i_<LeftMouse>|	<LeftMouse>	cursor at mouse click
|i_<ScrollWheelDown>|	<ScrollWheelDown>	move window three lines down
|i_<S-ScrollWheelDown>|	<S-ScrollWheelDown>	move window one page down
|i_<ScrollWheelUp>|	<ScrollWheelUp>		move window three lines up
|i_<S-ScrollWheelUp>|	<S-ScrollWheelUp>	move window one page up
|i_<ScrollWheelLeft>|	<ScrollWheelLeft>	move window six columns left
|i_<S-ScrollWheelLeft>|	<S-ScrollWheelLeft>	move window one page left
|i_<ScrollWheelRight>|	<ScrollWheelRight>	move window six columns right
|i_<S-ScrollWheelRight>| <S-ScrollWheelRight>	move window one page right

|CTRL-A|	CTRL-A		   add N to number at/after cursor
|CTRL-B|	CTRL-B		   scroll N screens Backwards
|CTRL-C|	CTRL-C		   interrupt current (search) command
|CTRL-D|	CTRL-D		   scroll Down N lines (default: half a screen)
|CTRL-E|	CTRL-E		   scroll N lines upwards (N lines Extra)
|CTRL-F|	CTRL-F		   scroll N screens Forward
|CTRL-G|	CTRL-G		   display current file name and position
|<BS>|		<BS>		   same as "h"
|CTRL-H|	CTRL-H		   same as "h"
|<Tab>|		<Tab>		   go to N newer entry in jump list
|CTRL-I|	CTRL-I		   same as <Tab>
|<NL>|		<NL>		   same as "j"
|CTRL-J|	CTRL-J		   same as "j"
|CTRL-L|	CTRL-L		   redraw screen
|<CR>|		<CR>		   cursor to the first CHAR N lines lower
|CTRL-M|	CTRL-M		   same as <CR>
|CTRL-N|	CTRL-N		   same as "j"
|CTRL-O|	CTRL-O		   go to N older entry in jump list
|CTRL-P|	CTRL-P		   same as "k"
|CTRL-R|	CTRL-R		   redo changes which were undone with 'u'
|CTRL-T|	CTRL-T		   jump to N older Tag in tag list
|CTRL-U|	CTRL-U		   scroll N lines Upwards (default: half a screen)
|CTRL-V|	CTRL-V		   start blockwise Visual mode
|CTRL-W|	CTRL-W {char}	   window commands, see |CTRL-W|
|CTRL-X|	CTRL-X		   subtract N from number at/after cursor
|CTRL-Y|	CTRL-Y		   scroll N lines downwards
|CTRL-Z|	CTRL-Z		   suspend program (or start new shell)
|CTRL-\_CTRL-N|	CTRL-\ CTRL-N	   go to Normal mode (no-op)
|CTRL-\_CTRL-G|	CTRL-\ CTRL-G	   go to Normal mode (no-op) CTRL-\ a - z	   reserved for extensions
|CTRL-]|	CTRL-]		   :ta to ident under cursor
|CTRL-^|	CTRL-^		   edit Nth alternate file (equivalent to ":e #N")
|CTRL-<Tab>|	CTRL-<Tab>	   same as `g<Tab>` : go to last accessed tab page

|<Space>|	<Space>		   same as "l"
|!|		!{motion}{filter}    filter Nmove text through the {filter} command
|!!|		!!{filter}	   filter N lines through the {filter} command
|quote|		"{register}  	   use {register} for next delete, yank or put ({.%#:} only work with put)
|#|		#		   search backward for the Nth occurrence of the ident under the cursor
|$|		$		   cursor to the end of Nth next line
|%|		%		   find the next (curly/square) bracket on this line and go to its match, or go to matching comment bracket, or go to matching preprocessor directive.
|N%|		{count}%	   go to N percentage in the file
|&|		&		   repeat last :s
|'|		'{a-zA-Z0-9}	   cursor to the first CHAR on the line with mark {a-zA-Z0-9}
|''|		''		   cursor to the first CHAR of the line where the cursor was before the latest jump.
|'(|		'(		   cursor to the first CHAR on the line of the start of the current sentence
|')|		')		   cursor to the first CHAR on the line of the end of the current sentence
|'<|		'<		   cursor to the first CHAR of the line where highlighted area starts/started in the current buffer.
|'>|		'>		   cursor to the first CHAR of the line where highlighted area ends/ended in the current buffer.
|'[|		'[		   cursor to the first CHAR on the line of the start of last operated text or start of put text
|']|		']		   cursor to the first CHAR on the line of the end of last operated text or end of put text
|'{|		'{		   cursor to the first CHAR on the line of the start of the current paragraph
|'}|		'}		   cursor to the first CHAR on the line of the end of the current paragraph
|(|		(		   cursor N sentences backward
|)|		)		   cursor N sentences forward
|star|		*		   search forward for the Nth occurrence of the ident under the cursor
|+|		+		   same as <CR>
|,|		,		   repeat latest f, t, F or T in opposite direction N times
|-|		-		   cursor to the first CHAR N lines higher
|.|		.		   repeat last change with count replaced with N
|/|		/{pattern}<CR>	   search forward for the Nth occurrence of {pattern}
|/<CR>|		/<CR>		   search forward for {pattern} of last search
|0|		0		   cursor to the first char of the line
|:|		:		   start entering an Ex command
|N:|		{count}:	   start entering an Ex command with range from current line to N-1 lines down
|;|		;		   repeat latest f, t, F or T N times
|<|		<{motion}	   shift Nmove lines one 'shiftwidth' leftwards
|<<|		<<		   shift N lines one 'shiftwidth' leftwards
|=|		={motion}	   filter Nmove lines through "indent"
|==|		==		   filter N lines through "indent"
|>|		>{motion}	   shift Nmove lines one 'shiftwidth' rightwards
|>>|		>>		   shift N lines one 'shiftwidth' rightwards
|?|		?{pattern}<CR>	   search backward for the Nth previous occurrence of {pattern}
|?<CR>|		?<CR>		   search backward for {pattern} of last search
|@|		@{a-z}		   execute the contents of register {a-z} N times
|@:|		@:		   repeat the previous ":" command N times
|@@|		@@		   repeat the previous @{a-z} N times
|A|		A		   append text after the end of the line N times
|B|		B		   cursor N WORDS backward
|C|		["x]C		   change from the cursor position to the end of the line, and N-1 more lines [into register x]; synonym for "c$"
|D|		["x]D		   delete the characters under the cursor until the end of the line and N-1 more lines [into register x]; synonym for "d$"
|E|		E		   cursor forward to the end of WORD N
|F|		F{char}		   cursor to the Nth occurrence of {char} to the left
|G|		G		   cursor to line N, default last line
|H|		H		   cursor to line N from top of screen
|I|		I		   insert text before the first CHAR on the line N times
|J|		J		   Join N lines; default is 2
|K|		K		   lookup Keyword under the cursor with 'keywordprg'
|L|		L		   cursor to line N from bottom of screen
|M|		M		   cursor to middle line of screen
|N|		N		   repeat the latest '/' or '?' N times in opposite direction
|O|		O		   begin a new line above the cursor and insert text, repeat N times
|P|		["x]P		   put the text [from register x] before the cursor N times
|R|		R		   enter replace mode: overtype existing characters, repeat the entered text N-1 times
|S|		["x]S		   delete N lines [into register x] and start insert; synonym for "cc".
|T|		T{char}		   cursor till after Nth occurrence of {char} to the left
|U|		U		   undo all latest changes on one line
|V|		V		   start linewise Visual mode
|W|		W		   cursor N WORDS forward
|X|		["x]X		   delete N characters before the cursor [into register x]
|Y|		["x]Y		   yank N lines [into register x]; synonym for "yy" Note: Mapped to "y$" by default. |default-mappings|
|ZZ|		ZZ		   write if buffer changed and close window
|ZQ|		ZQ		   close window without writing
|[|		[{char}		   square bracket command (see |[| below)
|]|		]{char}		   square bracket command (see |]| below)
|^|		^		   cursor to the first CHAR of the line
|_|		_		   cursor to the first CHAR N - 1 lines lower
|`|		`{a-zA-Z0-9}	   cursor to the mark {a-zA-Z0-9}
|`(|		`(		   cursor to the start of the current sentence
|`)|		`)		   cursor to the end of the current sentence
|`<|		`<		   cursor to the start of the highlighted area
|`>|		`>		   cursor to the end of the highlighted area
|`[|		`[		   cursor to the start of last operated text or start of putted text
|`]|		`]		   cursor to the end of last operated text or end of putted text
|``|		``		   cursor to the position before latest jump
|`{|		`{		   cursor to the start of the current paragraph
|`}|		`}		   cursor to the end of the current paragraph
|a|		a		   append text after the cursor N times
|b|		b		   cursor N words backward
|c|		["x]c{motion}	   delete Nmove text [into register x] and start insert
|cc|		["x]cc		   delete N lines [into register x] and start insert
|d|		["x]d{motion}	   delete Nmove text [into register x]
|dd|		["x]dd		   delete N lines [into register x]
|do|		do		   same as ":diffget"
|dp|		dp		   same as ":diffput"
|e|		e		   cursor forward to the end of word N
|f|		f{char}		   cursor to Nth occurrence of {char} to the right
|g|		g{char}		   extended commands, see |g| below
|h|		h		   cursor N chars to the left
|i|		i		   insert text before the cursor N times
|j|		j		   cursor N lines downward
|k|		k		   cursor N lines upward
|l|		l		   cursor N chars to the right
|m|		m{A-Za-z}	   set mark {A-Za-z} at cursor position
|n|		n		   repeat the latest '/' or '?' N times
|o|		o		   begin a new line below the cursor and insert text, repeat N times
|p|		["x]p		   put the text [from register x] after the cursor N times
|q|		q{0-9a-zA-Z"}	   record typed characters into named register {0-9a-zA-Z"} (uppercase to append)
|q|		q		   (while recording) stops recording
|Q|		Q		   replay last recorded macro
|q:|		q:		   edit : command-line in command-line window
|q/|		q/		   edit / command-line in command-line window
|q?|		q?		   edit ? command-line in command-line window
|r|		r{char}		   replace N chars with {char}
|s|		["x]s		   (substitute) delete N characters [into register x] and start insert
|t|		t{char}		   cursor till before Nth occurrence of {char} to the right
|u|		u		   undo changes
|v|		v		   start charwise Visual mode
|w|		w		   cursor N words forward
|x|		["x]x		   delete N characters under and after the cursor [into register x]
|y|		["x]y{motion}	   yank Nmove text [into register x]
|yy|		["x]yy		   yank N lines [into register x]
|z|		z{char}		   commands starting with 'z', see |z| below
|{|		{		   cursor N paragraphs backward
|bar|		|		   cursor to column N
|}|		}		   cursor N paragraphs forward
|~|		~		   'tildeop' off: switch case of N characters under cursor and move the cursor N characters to the right
|~|		~{motion}	   'tildeop' on: switch case of Nmove text
|<C-End>|	<C-End>		   same as "G"
|<C-Home>|	<C-Home>	   same as "gg"
|<C-Left>|	<C-Left>	   same as "b"
|<C-LeftMouse>|	<C-LeftMouse>	   ":ta" to the keyword at the mouse click
|<C-Right>|	<C-Right>	   same as "w"
|<C-RightMouse>| <C-RightMouse>	   same as "CTRL-T"
|<C-Tab>|	<C-Tab>		   same as "g<Tab>"
|<Del>|		["x]<Del>	   same as "x"
|N<Del>|	{count}<Del>	   remove the last digit from {count}
|<Down>|	<Down>		   same as "j"
|<End>|		<End>		   same as "$"
|<F1>|		<F1>		   same as <Help>
|<Help>|	<Help>		   open a help window
|<Home>|	<Home>		   same as "0"
|<Insert>|	<Insert>	   same as "i"
|<Left>|	<Left>		   same as "h"
|<LeftMouse>|	<LeftMouse>	   move cursor to the mouse click position
|<MiddleMouse>|	<MiddleMouse>	   same as "gP" at the mouse click position
|<PageDown>|	<PageDown>	   same as CTRL-F
|<PageUp>|	<PageUp>	   same as CTRL-B
|<Right>|	<Right>		   same as "l"
|<RightMouse>|	<RightMouse>	   start Visual mode, move cursor to the mouse click position
|<S-Down>|	<S-Down>	   same as CTRL-F
|<S-Left>|	<S-Left>	   same as "b"
|<S-LeftMouse>|	<S-LeftMouse>	   same as "*" at the mouse click position
|<S-Right>|	<S-Right>	   same as "w"
|<S-RightMouse>| <S-RightMouse>	   same as "#" at the mouse click position
|<S-Up>|	<S-Up>		   same as CTRL-B
|<Undo>|	<Undo>		   same as "u"
|<Up>|		<Up>		   same as "k" *<ScrollWheelDown>*	<ScrollWheelDown>	move window three lines down *<S-ScrollWheelDown>*	<S-ScrollWheelDown>	move window one page down *<ScrollWheelUp>*	<ScrollWheelUp>		move window three lines up *<S-ScrollWheelUp>*	<S-ScrollWheelUp>	move window one page up *<ScrollWheelLeft>*	<ScrollWheelLeft>	move window six columns left *<S-ScrollWheelLeft>*	<S-ScrollWheelLeft>	move window one page left *<ScrollWheelRight>*	<ScrollWheelRight>	move window six columns right *<S-ScrollWheelRight>*	<S-ScrollWheelRight>	move window one page right

|CTRL-W_CTRL-B|	CTRL-W CTRL-B	   same as "CTRL-W b"
|CTRL-W_CTRL-C|	CTRL-W CTRL-C	   same as "CTRL-W c"
|CTRL-W_CTRL-D|	CTRL-W CTRL-D	   same as "CTRL-W d"
|CTRL-W_CTRL-F|	CTRL-W CTRL-F	   same as "CTRL-W f" CTRL-W CTRL-G	   same as "CTRL-W g .."
|CTRL-W_CTRL-H|	CTRL-W CTRL-H	   same as "CTRL-W h"
|CTRL-W_CTRL-I|	CTRL-W CTRL-I	   same as "CTRL-W i"
|CTRL-W_CTRL-J|	CTRL-W CTRL-J	   same as "CTRL-W j"
|CTRL-W_CTRL-K|	CTRL-W CTRL-K	   same as "CTRL-W k"
|CTRL-W_CTRL-L|	CTRL-W CTRL-L	   same as "CTRL-W l"
|CTRL-W_CTRL-N|	CTRL-W CTRL-N	   same as "CTRL-W n"
|CTRL-W_CTRL-O|	CTRL-W CTRL-O	   same as "CTRL-W o"
|CTRL-W_CTRL-P|	CTRL-W CTRL-P	   same as "CTRL-W p"
|CTRL-W_CTRL-Q|	CTRL-W CTRL-Q	   same as "CTRL-W q"
|CTRL-W_CTRL-R|	CTRL-W CTRL-R	   same as "CTRL-W r"
|CTRL-W_CTRL-S|	CTRL-W CTRL-S	   same as "CTRL-W s"
|CTRL-W_CTRL-T|	CTRL-W CTRL-T	   same as "CTRL-W t"
|CTRL-W_CTRL-V|	CTRL-W CTRL-V	   same as "CTRL-W v"
|CTRL-W_CTRL-W|	CTRL-W CTRL-W	   same as "CTRL-W w"
|CTRL-W_CTRL-X|	CTRL-W CTRL-X	   same as "CTRL-W x"
|CTRL-W_CTRL-Z|	CTRL-W CTRL-Z	   same as "CTRL-W z"
|CTRL-W_CTRL-]|	CTRL-W CTRL-]	   same as "CTRL-W ]"
|CTRL-W_CTRL-^|	CTRL-W CTRL-^	   same as "CTRL-W ^"
|CTRL-W_CTRL-_|	CTRL-W CTRL-_	   same as "CTRL-W _"
|CTRL-W_+|	CTRL-W +	   increase current window height N lines
|CTRL-W_-|	CTRL-W -	   decrease current window height N lines
|CTRL-W_<|	CTRL-W <	   decrease current window width N columns
|CTRL-W_=|	CTRL-W =	   make all windows the same height & width
|CTRL-W_>|	CTRL-W >	   increase current window width N columns
|CTRL-W_H|	CTRL-W H	   move current window to the far left
|CTRL-W_J|	CTRL-W J	   move current window to the very bottom
|CTRL-W_K|	CTRL-W K	   move current window to the very top
|CTRL-W_L|	CTRL-W L	   move current window to the far right
|CTRL-W_P|	CTRL-W P	   go to preview window
|CTRL-W_R|	CTRL-W R	   rotate windows upwards N times
|CTRL-W_S|	CTRL-W S	   same as "CTRL-W s"
|CTRL-W_T|	CTRL-W T	   move current window to a new tab page
|CTRL-W_W|	CTRL-W W	   go to N previous window (wrap around)
|CTRL-W_]|	CTRL-W ]	   split window and jump to tag under cursor
|CTRL-W_^|	CTRL-W ^	   split current window and edit alternate file N
|CTRL-W__|	CTRL-W _	   set current window height to N (default: very high)
|CTRL-W_b|	CTRL-W b	   go to bottom window
|CTRL-W_c|	CTRL-W c	   close current window (like |:close|)
|CTRL-W_d|	CTRL-W d	   split window and jump to definition under the cursor
|CTRL-W_f|	CTRL-W f	   split window and edit file name under the cursor
|CTRL-W_F|	CTRL-W F	   split window and edit file name under the cursor and jump to the line number following the file name.
|CTRL-W_g_CTRL-]| CTRL-W g CTRL-]  split window and do |:tjump| to tag under cursor
|CTRL-W_g]|	CTRL-W g ]	   split window and do |:tselect| for tag under cursor
|CTRL-W_g}|	CTRL-W g }	   do a |:ptjump| to the tag under the cursor
|CTRL-W_gf|	CTRL-W g f	   edit file name under the cursor in a new tab page
|CTRL-W_gF|	CTRL-W g F	   edit file name under the cursor in a new tab page and jump to the line number following the file name.
|CTRL-W_gt|	CTRL-W g t	   same as `gt`: go to next tab page
|CTRL-W_gT|	CTRL-W g T	   same as `gT`: go to previous tab page
|CTRL-W_g<Tab>|	CTRL-W g <Tab>	   same as |g<Tab>|: go to last accessed tab page
|CTRL-W_h|	CTRL-W h	   go to Nth left window (stop at first window)
|CTRL-W_i|	CTRL-W i	   split window and jump to declaration of identifier under the cursor
|CTRL-W_j|	CTRL-W j	   go N windows down (stop at last window)
|CTRL-W_k|	CTRL-W k	   go N windows up (stop at first window)
|CTRL-W_l|	CTRL-W l	   go to Nth right window (stop at last window)
|CTRL-W_n|	CTRL-W n	   open new window, N lines high
|CTRL-W_o|	CTRL-W o	   close all but current window (like |:only|)
|CTRL-W_p|	CTRL-W p	   go to previous (last accessed) window
|CTRL-W_q|	CTRL-W q	   quit current window (like |:quit|)
|CTRL-W_r|	CTRL-W r	   rotate windows downwards N times
|CTRL-W_s|	CTRL-W s	   split current window in two parts, new window N lines high
|CTRL-W_t|	CTRL-W t	   go to top window
|CTRL-W_v|	CTRL-W v	   split current window vertically, new window N columns wide
|CTRL-W_w|	CTRL-W w	   go to N next window (wrap around)
|CTRL-W_x|	CTRL-W x	   exchange current window with window N (default: next window)
|CTRL-W_z|	CTRL-W z	   close preview window
|CTRL-W_bar|	CTRL-W |	   set window width to N columns
|CTRL-W_}|	CTRL-W }	   show tag under cursor in preview window
|CTRL-W_<Down>|	CTRL-W <Down>	   same as "CTRL-W j"
|CTRL-W_<Up>|	CTRL-W <Up>	   same as "CTRL-W k"
|CTRL-W_<Left>|	CTRL-W <Left>	   same as "CTRL-W h"
|CTRL-W_<Right>| CTRL-W <Right>	   same as "CTRL-W l"

|[_CTRL-D|	[ CTRL-D	   jump to first #define found in current and included files matching the word under the cursor, start searching at beginning of current file
|[_CTRL-I|	[ CTRL-I	   jump to first line in current and included files that contains the word under the cursor, start searching at beginning of current file
|[#|		[#		   cursor to N previous unmatched #if, #else or #ifdef
|['|		['		   cursor to previous lowercase mark, on first non-blank
|[(|		[(		   cursor N times back to unmatched '('
|[star|		[*		   same as "[/"
|[`|		[`		   cursor to previous lowercase mark
|[/|		[/		   cursor to N previous start of a C comment
|[D|		[D		   list all defines found in current and included files matching the word under the cursor, start searching at beginning of current file
|[I|		[I		   list all lines found in current and included files that contain the word under the cursor, start searching at beginning of current file
|[P|		[P		   same as "[p"
|[[|		[[		   cursor N sections backward
|[]|		[]		   cursor N SECTIONS backward
|[c|		[c		   cursor N times backwards to start of change
|[d|		[d		   show first #define found in current and included files matching the word under the cursor, start searching at beginning of current file
|[f|		[f		   same as "gf"
|[i|		[i		   show first line found in current and included files that contains the word under the cursor, start searching at beginning of current file
|[m|		[m		   cursor N times back to start of member function
|[p|		[p		   like "P", but adjust indent to current line
|[s|		[s		   move to the previous misspelled word
|[z|		[z		   move to start of open fold
|[{|		[{		   cursor N times back to unmatched '{'
|[<MiddleMouse>| [<MiddleMouse>	   same as "[p"

|]_CTRL-D|	] CTRL-D	   jump to first #define found in current and included files matching the word under the cursor, start searching at cursor position
|]_CTRL-I|	] CTRL-I	   jump to first line in current and included files that contains the word under the cursor, start searching at cursor position
|]#|		]#		   cursor to N next unmatched #endif or #else
|]'|		]'		   cursor to next lowercase mark, on first non-blank
|])|		])		   cursor N times forward to unmatched ')'
|]star|		]*		   same as "]/"
|]`|		]`		   cursor to next lowercase mark
|]/|		]/		   cursor to N next end of a C comment
|]D|		]D		   list all #defines found in current and included files matching the word under the cursor, start searching at cursor position
|]I|		]I		   list all lines found in current and included files that contain the word under the cursor, start searching at cursor position
|]P|		]P		   same as "[p"
|][|		][		   cursor N SECTIONS forward
|]]|		]]		   cursor N sections forward
|]c|		]c		   cursor N times forward to start of change
|]d|		]d		   show first #define found in current and included files matching the word under the cursor, start searching at cursor position
|]f|		]f		   same as "gf"
|]i|		]i		   show first line found in current and included files that contains the word under the cursor, start searching at cursor position
|]m|		]m		   cursor N times forward to end of member function
|]p|		]p		   like "p", but adjust indent to current line
|]s|		]s		   move to next misspelled word
|]z|		]z		   move to end of open fold
|]}|		]}		   cursor N times forward to unmatched '}'
|]<MiddleMouse>| ]<MiddleMouse>	   same as "]p"

|g_CTRL-G|	g CTRL-G	   show information about current cursor position
|g_CTRL-H|	g CTRL-H	   start Select block mode
|g_CTRL-]|	g CTRL-]	   |:tjump| to the tag under the cursor
|g#|		g#		   like "#", but without using "\<" and "\>"
|g$|		g$		   when 'wrap' off go to rightmost character of the current line that is on the screen; when 'wrap' on go to the rightmost character of the current screen line
|g&|		g&		   repeat last ":s" on all lines
|g'|		g'{mark}	   like |'| but without changing the jumplist
|g`|		g`{mark}	   like |`| but without changing the jumplist
|gstar|		g*		   like "*", but without using "\<" and "\>"
|g+|		g+		   go to newer text state N times
|g,|		g,		   go to N newer position in change list
|g-|		g-		   go to older text state N times
|g0|		g0		   when 'wrap' off go to leftmost character of the current line that is on the screen; when 'wrap' on go to the leftmost character of the current screen line
|g8|		g8		   print hex value of bytes used in UTF-8 character under the cursor
|g;|		g;		   go to N older position in change list
|g<|		g<		   display previous command output
|g?|		g?		   Rot13 encoding operator
|g?g?|		g??		   Rot13 encode current line
|g?g?|		g?g?		   Rot13 encode current line
|gD|		gD		   go to definition of word under the cursor in current file
|gE|		gE		   go backwards to the end of the previous WORD
|gH|		gH		   start Select line mode
|gI|		gI		   like "I", but always start in column 1
|gJ|		gJ		   join lines without inserting space
|gN|		gN	      1,   find the previous match with the last used search pattern and Visually select it
|gP|		["x]gP		   put the text [from register x] before the cursor N times, leave the cursor after it
|gQ|		gQ		    switch to "Ex" mode with Vim editing
|gR|		gR		   enter Virtual Replace mode
|gT|		gT		   go to the previous tab page
|gU|		gU{motion}	   make Nmove text uppercase
|gV|		gV		   don't reselect the previous Visual area when executing a mapping or menu in Select mode
|g]|		g]		   :tselect on the tag under the cursor
|g^|		g^		   when 'wrap' off go to leftmost non-white character of the current line that is on the screen; when 'wrap' on go to the leftmost non-white character of the current screen line
|g_|		g_		   cursor to the last CHAR N - 1 lines lower
|ga|		ga		   print ascii value of character under the cursor
|gd|		gd		   go to definition of word under the cursor in current function
|ge|		ge		   go backwards to the end of the previous word
|gf|		gf		   start editing the file whose name is under the cursor
|gF|		gF		   start editing the file whose name is under the cursor and jump to the line number following the filename.
|gg|		gg		   cursor to line N, default first line
|gh|		gh		   start Select mode
|gi|		gi		   like "i", but first move to the |'^| mark
|gj|		gj		   like "j", but when 'wrap' on go N screen lines down
|gk|		gk		   like "k", but when 'wrap' on go N screen lines up
|gm|		gm		   go to character at middle of the screenline
|gM|		gM		   go to character at middle of the text line
|gn|		gn	      1,   find the next match with the last used search pattern and Visually select it
|go|		go		   cursor to byte N in the buffer
|gp|		["x]gp		   put the text [from register x] after the cursor N times, leave the cursor after it
|gq|		gq{motion}	   format Nmove text
|gr|		gr{char}	   virtual replace N chars with {char}
|gs|		gs		   go to sleep for N seconds (default 1)
|gt|		gt		   go to the next tab page
|gu|		gu{motion}	   make Nmove text lowercase
|gv|		gv		   reselect the previous Visual area
|gw|		gw{motion}	   format Nmove text and keep cursor
|netrw-gx|	gx		   execute application for file name under the cursor (only with |netrw| plugin)
|g@|		g@{motion}	   call 'operatorfunc'
|g~|		g~{motion}	   swap case for Nmove text
|g<Down>|	g<Down>		   same as "gj"
|g<End>|	g<End>		   same as "g$"
|g<Home>|	g<Home>		   same as "g0"
|g<LeftMouse>|	g<LeftMouse>	   same as <C-LeftMouse> g<MiddleMouse>	   same as <C-MiddleMouse>
|g<RightMouse>|	g<RightMouse>	   same as <C-RightMouse>
|g<Tab>|	g<Tab>		   go to last accessed tab page
|g<Up>|		g<Up>		   same as "gk"

|z<CR>|		z<CR>		   redraw, cursor line to top of window, cursor on first non-blank
|zN<CR>|	z{height}<CR>	   redraw, make window {height} lines high
|z+|		z+		   cursor on line N (default line below window), otherwise like "z<CR>"
|z-|		z-		   redraw, cursor line at bottom of window, cursor on first non-blank
|z.|		z.		   redraw, cursor line to center of window, cursor on first non-blank
|z=|		z=		   give spelling suggestions
|zA|		zA		   open a closed fold or close an open fold recursively
|zC|		zC		   close folds recursively
|zD|		zD		   delete folds recursively
|zE|		zE		   eliminate all folds
|zF|		zF		   create a fold for N lines
|zG|		zG		   temporarily mark word as correctly spelled
|zH|		zH		   when 'wrap' off scroll half a screenwidth to the right
|zL|		zL		   when 'wrap' off scroll half a screenwidth to the left
|zM|		zM		   set 'foldlevel' to zero
|zN|		zN		   set 'foldenable'
|zO|		zO		   open folds recursively
|zR|		zR		   set 'foldlevel' to the deepest fold
|zW|		zW		   temporarily mark word as incorrectly spelled
|zX|		zX		   re-apply 'foldlevel'
|z^|		z^		   cursor on line N (default line above window), otherwise like "z-"
|za|		za		   open a closed fold, close an open fold
|zb|		zb		   redraw, cursor line at bottom of window
|zc|		zc		   close a fold
|zd|		zd		   delete a fold
|ze|		ze		   when 'wrap' off scroll horizontally to position the cursor at the end (right side) of the screen
|zf|		zf{motion}	   create a fold for Nmove text
|zg|		zg		   permanently mark word as correctly spelled
|zh|		zh		   when 'wrap' off scroll screen N characters to the right
|zi|		zi		   toggle 'foldenable'
|zj|		zj		   move to the start of the next fold
|zk|		zk		   move to the end of the previous fold
|zl|		zl		   when 'wrap' off scroll screen N characters to the left
|zm|		zm		   subtract one from 'foldlevel'
|zn|		zn		   reset 'foldenable'
|zo|		zo		   open fold
|zp|		zp		   paste in block-mode without trailing spaces
|zP|		zP		   paste in block-mode without trailing spaces
|zr|		zr		   add one to 'foldlevel'
|zs|		zs		   when 'wrap' off scroll horizontally to position the cursor at the start (left side) of the screen
|zt|		zt		   redraw, cursor line at top of window
|zuw|		zuw		   undo |zw|
|zug|		zug		   undo |zg|
|zuW|		zuW		   undo |zW|
|zuG|		zuG		   undo |zG|
|zv|		zv		   open enough folds to view the cursor line
|zw|		zw		   permanently mark word as incorrectly spelled
|zx|		zx		   re-apply 'foldlevel' and do "zv"
|zy|		zy		   yank without trailing spaces
|zz|		zz		   redraw, cursor line at center of window
|z<Left>|	z<Left>		   same as "zh"
|z<Right>|	z<Right>	   same as "zl"

|o_v|		v		force operator to work charwise
|o_V|		V		force operator to work linewise
|o_CTRL-V|	CTRL-V		force operator to work blockwise

|v_CTRL-\_CTRL-N| CTRL-\ CTRL-N	   stop Visual mode
|v_CTRL-\_CTRL-G| CTRL-\ CTRL-G	   go to Normal mode
|v_CTRL-A|	CTRL-A		   add N to number in highlighted text
|v_CTRL-C|	CTRL-C		   stop Visual mode
|v_CTRL-G|	CTRL-G		   toggle between Visual mode and Select mode
|v_<BS>|	<BS>		   Select mode: delete highlighted area
|v_CTRL-H|	CTRL-H		   same as <BS>
|v_CTRL-O|	CTRL-O		   switch from Select to Visual mode for one command
|v_CTRL-V|	CTRL-V		   make Visual mode blockwise or stop Visual mode
|v_CTRL-X|	CTRL-X		   subtract N from number in highlighted text
|v_<Esc>|	<Esc>		   stop Visual mode
|v_CTRL-]|	CTRL-]		   jump to highlighted tag
|v_!|		!{filter}	   filter the highlighted lines through the external command {filter}
|v_:|		:		   start a command-line with the highlighted lines as a range
|v_<|		<		   shift the highlighted lines one 'shiftwidth' left
|v_=|		=		   filter the highlighted lines through the external program given with the 'equalprg' option
|v_>|		>		   shift the highlighted lines one 'shiftwidth' right
|v_b_A|		A		   block mode: append same text in all lines, after the highlighted area
|v_C|		C		   delete the highlighted lines and start insert
|v_D|		D		   delete the highlighted lines
|v_b_I|		I		   block mode: insert same text in all lines, before the highlighted area
|v_J|		J		   join the highlighted lines
|v_K|		K		   run 'keywordprg' on the highlighted area
|v_O|		O		   move horizontally to other corner of area
|v_P|		P		   replace highlighted area with register contents; registers are unchanged Q		   does not start Ex mode
|v_R|		R		   delete the highlighted lines and start insert
|v_S|		S		   delete the highlighted lines and start insert
|v_U|		U		   make highlighted area uppercase
|v_V|		V		   make Visual mode linewise or stop Visual mode
|v_X|		X		   delete the highlighted lines
|v_Y|		Y		   yank the highlighted lines
|v_aquote|	a"		   extend highlighted area with a double quoted string
|v_a'|		a'		   extend highlighted area with a single quoted string
|v_a(|		a(		   same as ab
|v_a)|		a)		   same as ab
|v_a<|		a<		   extend highlighted area with a <> block
|v_a>|		a>		   same as a<
|v_aB|		aB		   extend highlighted area with a {} block
|v_aW|		aW		   extend highlighted area with "a WORD"
|v_a[|		a[		   extend highlighted area with a [] block
|v_a]|		a]		   same as a[
|v_a`|		a`		   extend highlighted area with a backtick quoted string
|v_ab|		ab		   extend highlighted area with a () block
|v_ap|		ap		   extend highlighted area with a paragraph
|v_as|		as		   extend highlighted area with a sentence
|v_at|		at		   extend highlighted area with a tag block
|v_aw|		aw		   extend highlighted area with "a word"
|v_a{|		a{		   same as aB
|v_a}|		a}		   same as aB
|v_c|		c		   delete highlighted area and start insert
|v_d|		d		   delete highlighted area
|v_g_CTRL-A|	g CTRL-A	   add N to number in highlighted text
|v_g_CTRL-X|	g CTRL-X	   subtract N from number in highlighted text
|v_gJ|		gJ		   join the highlighted lines without inserting spaces
|v_gq|		gq		   format the highlighted lines
|v_gv|		gv		   exchange current and previous highlighted area
|v_iquote|	i"		   extend highlighted area with a double quoted string (without quotes)
|v_i'|		i'		   extend highlighted area with a single quoted string (without quotes)
|v_i(|		i(		   same as ib
|v_i)|		i)		   same as ib
|v_i<|		i<		   extend highlighted area with inner <> block
|v_i>|		i>		   same as i<
|v_iB|		iB		   extend highlighted area with inner {} block
|v_iW|		iW		   extend highlighted area with "inner WORD"
|v_i[|		i[		   extend highlighted area with inner [] block
|v_i]|		i]		   same as i[
|v_i`|		i`		   extend highlighted area with a backtick quoted string (without the backticks)
|v_ib|		ib		   extend highlighted area with inner () block
|v_ip|		ip		   extend highlighted area with inner paragraph
|v_is|		is		   extend highlighted area with inner sentence
|v_it|		it		   extend highlighted area with inner tag block
|v_iw|		iw		   extend highlighted area with "inner word"
|v_i{|		i{		   same as iB
|v_i}|		i}		   same as iB
|v_o|		o		   move cursor to other corner of area
|v_p|		p		   replace highlighted area with register contents; deleted text in unnamed register
|v_r|		r		   replace highlighted area with a character
|v_s|		s		   delete highlighted area and start insert
|v_u|		u		   make highlighted area lowercase
|v_v|		v		   make Visual mode charwise or stop Visual mode
|v_x|		x		   delete the highlighted area
|v_y|		y		   yank the highlighted area
|v_~|		~		   swap case for the highlighted area

|c_CTRL-A|	CTRL-A		do completion on the pattern in front of the cursor and insert all matches
|c_CTRL-B|	CTRL-B		cursor to begin of command-line
|c_CTRL-C|	CTRL-C		same as <Esc>
|c_CTRL-D|	CTRL-D		list completions that match the pattern in front of the cursor
|c_CTRL-E|	CTRL-E		cursor to end of command-line
|'cedit'|	CTRL-F		default value for 'cedit': opens the
|c_CTRL-G|	CTRL-G		next match when 'incsearch' is active
|c_<BS>|	<BS>		delete the character in front of the cursor
|c_digraph|	{char1} <BS> {char2} enter digraph when 'digraph' is on
|c_CTRL-H|	CTRL-H		same as <BS>
|c_<Tab>|	<Tab>		if 'wildchar' is <Tab>: Do completion on the pattern in front of the cursor
|c_<S-Tab>|	<S-Tab>		same as CTRL-P
|c_wildchar|	'wildchar'	Do completion on the pattern in front of the cursor (default: <Tab>)
|c_CTRL-I|	CTRL-I		same as <Tab>
|c_<NL>|	<NL>		same as <CR>
|c_CTRL-J|	CTRL-J		same as <CR>
|c_CTRL-K|	CTRL-K {char1} {char2} enter digraph
|c_CTRL-L|	CTRL-L		do completion on the pattern in front of the cursor and insert the longest common part
|c_<CR>|	<CR>		execute entered command
|c_CTRL-M|	CTRL-M		same as <CR>
|c_CTRL-N|	CTRL-N		after using 'wildchar' with multiple matches: go to next match, otherwise: recall older command-line from history.
|c_CTRL-P|	CTRL-P		after using 'wildchar' with multiple matches: go to previous match, otherwise: recall older command-line from history.
|c_CTRL-Q|	CTRL-Q		same as CTRL-V, unless it's used for terminal control flow
|c_CTRL-R|	CTRL-R {regname} insert the contents of a register or object under the cursor as if typed
|c_CTRL-R_CTRL-O| CTRL-R CTRL-O {regname} insert the contents of a register or object under the cursor literally
|c_CTRL-T|	CTRL-T		previous match when 'incsearch' is active
|c_CTRL-U|	CTRL-U		remove all characters
|c_CTRL-V|	CTRL-V		insert next non-digit literally, insert three digit decimal number as a single byte.
|c_CTRL-W|	CTRL-W		delete the word in front of the cursor CTRL-Y		copy (yank) modeless selection
|c_<Esc>|	<Esc>		abandon command-line without executing it
|c_CTRL-[|	CTRL-[		same as <Esc>
|c_CTRL-\_CTRL-N| CTRL-\ CTRL-N	go to Normal mode, abandon command-line
|c_CTRL-\_CTRL-G| CTRL-\ CTRL-G	go to Normal mode, abandon command-line CTRL-\ a - d	reserved for extensions
|c_CTRL-\_e|	CTRL-\ e {expr} replace the command line with the result of {expr} CTRL-\ f - z	reserved for extensions
|c_CTRL-]|	CTRL-]		trigger abbreviation
|c_CTRL-^|	CTRL-^		toggle use of |:lmap| mappings
|c_CTRL-_|	CTRL-_		when 'allowrevins' set: change language (Hebrew)
|c_<Del>|	<Del>		delete the character under the cursor

|c_<Left>|	<Left>		cursor left
|c_<S-Left>|	<S-Left>	cursor one word left
|c_<C-Left>|	<C-Left>	cursor one word left
|c_<Right>|	<Right>		cursor right
|c_<S-Right>|	<S-Right>	cursor one word right
|c_<C-Right>|	<C-Right>	cursor one word right
|c_<Up>|	<Up>		recall previous command-line from history that matches pattern in front of the cursor
|c_<S-Up>|	<S-Up>		recall previous command-line from history
|c_<Down>|	<Down>		recall next command-line from history that matches pattern in front of the cursor
|c_<S-Down>|	<S-Down>	recall next command-line from history
|c_<Home>|	<Home>		cursor to start of command-line
|c_<End>|	<End>		cursor to end of command-line
|c_<PageDown>|	<PageDown>	same as <S-Down>
|c_<PageUp>|	<PageUp>	same as <S-Up>
|c_<Insert>|	<Insert>	toggle insert/overstrike mode
|c_<LeftMouse>|	<LeftMouse>	cursor at mouse click
